https://circleci.com/signup/

this is how we should start

NeuVector automate security


table of contents


Heading

                                        .o.
                                      o8888o
                                     d888888b
                                     `Y8888P'
                                 o .oood88booo. .o
                           Ybo  .88888888888888888.
                           "8888888888888888888888888b,
                          .o88888888888888888888888888"
                        Y88888888888888888888888888888b.
                       .o8888888888888888888888888888888.
                       8888888888888888888888888888888888
        o, ,db, ,o    d8888888888888888888888888888888888[
       .8888888888.   88888888888888888888888888888888888[
      o888888888888b ]88888888888888888888888888888888888
     d88888888888888o88888888888888888888888888888888888P
 .o8o88888888888888888888888888888888888888888888888888"
<8888888888888888888888888888888888888888888888888888K
  "Y"88888888888888888888888888888888888888888888888888o
     Y88888888888888"88888888888888888888888888888888888b
      "888888888888" ]88888888888888888888888888888888888
       '8888888888`   88888888888888888888888888888888888[
        "` "YP" `"    "8888888888888888888888888888888888[
                        888888888888888888888888888888888
                        "8888888888888888888888888888888'
                        d88888888888888888888888888888P'
                          `"88888888888888888888888888o
                           ,8888888888888888888888888P'
                           dP"  "88888888888888888
                                 " `"""Y88P"""' "'
                                     .d8888b.
                                     Y888888P
                                      "8888"
                                        `"'

sub section

         ___---___
      .--         --.
    ./   ()      .-. \.
   /   o    .   (   )  \
  / .            '-'    \
 | ()    .  O         .  |
|                         |
|    o           ()       |
|       .--.          O   |
 | .   |    |            |
  \    `.__.'    o   .  /
   \                   /
    `\  o    ()      /'
      `--___   ___--'
            ---


sub section


     __|--|     |--|__
    /  |  |-----|  |  \
   /   \__|-----|__/   \
  /   ______---______   \/\
 /   /               \   \/
{   /                 \   }
|  {                   }  |-,
|  |
|  {                   }  |-'
{   \                 /   }
 \   `------___------'   /\
  \     __|-----|__     /\/
   \   /  |-----|  \   /
    \  |--|     |--|  /
     --|  |-----|  |--


sub section

       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__|
  |      | |      |
    \ | / _ \ | /
     \_________/



sub section


    .-----,
  .'\    / "/\
 // /   /  /  \
|_,'   /  /    |
:     /  /     |
 \   /  /     /
  `./  /   _.'
    `"'---"


are tips
 
    .--.
  .'_\/_'.
  '. /\ .'
    "||"




getting started


                                        .o.
                                      o8888o
                                     d888888b
                                     `Y8888P'
                                 o .oood88booo. .o
                           Ybo  .88888888888888888.
                           "8888888888888888888888888b,
                          .o88888888888888888888888888"
                        Y88888888888888888888888888888b.
                       .o8888888888888888888888888888888.
                       8888888888888888888888888888888888
        o, ,db, ,o    d8888888888888888888888888888888888[
       .8888888888.   88888888888888888888888888888888888[
      o888888888888b ]88888888888888888888888888888888888
     d88888888888888o88888888888888888888888888888888888P
 .o8o88888888888888888888888888888888888888888888888888"
<8888888888888888888888888888888888888888888888888888K
  "Y"88888888888888888888888888888888888888888888888888o
     Y88888888888888"88888888888888888888888888888888888b
      "888888888888" ]88888888888888888888888888888888888
       '8888888888`   88888888888888888888888888888888888[
        "` "YP" `"    "8888888888888888888888888888888888[
                        888888888888888888888888888888888
                        "8888888888888888888888888888888'
                        d88888888888888888888888888888P'
                          `"88888888888888888888888888o
                           ,8888888888888888888888888P'
                           dP"  "88888888888888888
                                 " `"""Y88P"""' "'
                                     .d8888b.
                                     Y888888P
                                      "8888"
                                        `"'


Spotify and circleCI

https://circleci.com/gh/spotify/helios/5715#tests/containers/3

         ___---___
      .--         --.
    ./   ()      .-. \.
   /   o    .   (   )  \
  / .            '-'    \
 | ()    .  O         .  |
|                         |
|    o           ()       |
|       .--.          O   |
 | .   |    |            |
  \    `.__.'    o   .  /
   \                   /
    `\  o    ()      /'
      `--___   ___--'
            ---


Set up test runners to highlight failing tests. If your tests pass, it will show how fast your test ran.

For repos you have write permissions to, you will be able to easily debug and rebuild via SSH.



learning with circleCI
         ___---___
      .--         --.
    ./   ()      .-. \.
   /   o    .   (   )  \
  / .            '-'    \
 | ()    .  O         .  |
|                         |
|    o           ()       |
|       .--.          O   |
 | .   |    |            |
  \    `.__.'    o   .  /
   \                   /
    `\  o    ()      /'
      `--___   ___--'
            ---

lets make a sample repo

so we have a repo for it


Hello world
https://circleci.com/docs/2.0/hello-world/
         ___---___
      .--         --.
    ./   ()      .-. \.
   /   o    .   (   )  \
  / .            '-'    \
 | ()    .  O         .  |
|                         |
|    o           ()       |
|       .--.          O   |
 | .   |    |            |
  \    `.__.'    o   .  /
   \                   /
    `\  o    ()      /'
      `--___   ___--'
            ---

creaete a .circleci directory in the local directory
create a config.yml and add given code
push to github and set up project
start building for first build
CircleCI runs each job in a separate container or VM. That is, each time your job runs, CircleCI spins up a container or VM to run the job

 
    .--.
  .'_\/_'.  if u get a no config found error its probably u did .yaml, plzz use .yml
  '. /\ .'
    "||"



building the js application

     __|--|     |--|__
    /  |  |-----|  |  \
   /   \__|-----|__/   \
  /   ______---______   \/\
 /   /               \   \/
{   /                 \   }
|  {                   }  |-,
|  |
|  {                   }  |-'
{   \                 /   }
 \   `------___------'   /\
  \     __|-----|__     /\/
   \   /  |-----|  \   /
    \  |--|     |--|  /
     --|  |-----|  |--


Resources
       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__|
  |      | |      |
    \ | / _ \ | /
     \_________/


you need to refer to

https://github.com/CircleCI-Public/circleci-demo-javascript-express
https://circleci.com/gh/CircleCI-Public/circleci-demo-javascript-express

they say use their docker image( I wish i did things docker way oh well ) , and it uses mongo and react
idk wht ill do abt react ill try


build a project
       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__|
  |      | |      |
    \ | / _ \ | /
     \_________/


fork the project from github
Go to the Add Projects page in CircleCI and click the Build Project button next to the project you just forked
follow steps
To make changes you can edit the .circleci/config.yml file and make a commit. When you push a commit to GitHub, CircleCI will build and test the project.

refer to the sample config.yml in demo


Understanding the config file
location ./demo/.circleci/config.yml

     __|--|     |--|__
    /  |  |-----|  |  \
   /   \__|-----|__/   \
  /   ______---______   \/\
 /   /               \   \/
{   /                 \   }
|  {                   }  |-,
|  |
|  {                   }  |-'
{   \                 /   }
 \   `------___------'   /\
  \     __|-----|__     /\/
   \   /  |-----|  \   /
    \  |--|     |--|  /
     --|  |-----|  |--


every config.yml file starts with the version key used to issue warnings about breaking changes


--------
version: 2
--------


    .-----,
  .'\    / "/\
 // /   /  /  \
|_,'   /  /    |
:     /  /     |
 \   /  /     /
  `./  /   _.'
    `"'---"

a run is made of one or more jobs if there are no workflows there must be build job
use working_directory to specify where a jobs steps are run

working_directory: ~/mern-starter

The steps of a job occur in a virtual environment called an executor.


ex
jobs:
  build:
    working_directory: ~/mern-starter
    docker:
      - image: circleci/node:4.8.2
      - image: mongo:3.4.4
      
all commands are executed in the first (primary) container


    .-----,
  .'\    / "/\
 // /   /  /  \
|_,'   /  /    |
:     /  /     |
 \   /  /     /
  `./  /   _.'
    `"'---""
"
create steps to run specific commands
use  checkout: to check out source code, by default it checked out to the path specified by working_directory

Use the save_cache step to cache certain files or directories. In this example, we cache node_modules using a checksum of the package.json as the cache-key.
Use the restore_cache step to restore cached files or directories.


Cache: example

    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules


run the app
    .-----,
  .'\    / "/\
 // /   /  /  \
|_,'   /  /    |
:     /  /     |
 \   /  /     /
  `./  /   _.'
    `"'---""
"
 
 
      - run:
          name: test
          command: npm test
      - run:
          name: code-coverage
          command: './node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts:
          path: test-results.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      - store_test_results:
          path: test-results.xml
          
since the dependencies are cached and installed we can run the test suite and upload results as an artifact, made availble on the .circleci web app


version: 2
jobs:
  build:
    working_directory: ~/mern-starter
    docker:
      - image: circleci/node:10.16.3
      - image: angular/ngcontainer
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: angular
          command: npm install  @angular/cli
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: npm test
      - store_artifacts:
          path: test-results.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      - store_test_results:
          path: test-results.xml
          
so far angular running that test is going to be tough since its encapsulated in karma, we need to replace karma with circleCI, circleCI makes sure your app can build its not looking for test to run


you quite cant use it with angular yet


         ___---___
      .--         --.
    ./   ()      .-. \.
   /   o    .   (   )  \
  / .            '-'    \
 | ()    .  O         .  |
|                         |
|    o           ()       |
|       .--.          O   |
 | .   |    |            |
  \    `.__.'    o   .  /
   \                   /
    `\  o    ()      /'
      `--___   ___--'
            ---
            

CircleCI 2.0  project tutorial in depth

repo:https://github.com/CircleCI-Public/circleci-demo-python-flask
circleci:https://circleci-demo-python-flask.herokuapp.com/



The following sections walk through how Jobs and Steps are configured for this application, how to run unit tests and integration tests with Selenium and Chrome in the CircleCI environment, and how to deploy the demo application to Heroku

            
            
            
            

     __|--|     |--|__
    /  |  |-----|  |  \
   /   \__|-----|__/   \
  /   ______---______   \/\
 /   /               \   \/
{   /                 \   }
|  {                   }  |-,
|  |   Basic Setup
|  {                   }  |-'
{   \                 /   }
 \   `------___------'   /\
  \     __|-----|__     /\/
   \   /  |-----|  \   /
    \  |--|     |--|  /
     --|  |-----|  |--
            

so a config.yml file is made up of several Jobs, we have one job called build
a job is comprised of several steps
those steps execute in the first container u see for docker -> image




    .-----,
  .'\    / "/\
 // /   /  /  \
|_,'   /  /    |
:     /  /     |
 \   /  /     /
  `./  /   _.'
    `"'---"

if your not using workflows u must

executor: docker is one of them
image: a docker image here is tht python one
steps: u always start with checkout to gain access to your projects code, then run keys which automate build test and deploy



ex

version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
    steps:
      - checkout
      - run: pip install -r requirements/dev.txt
      
      
      
Service Containers
       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__
    \ | / _ \ | /
     \_________/
       
if the job needs additional software endpoints you can list more docker images in the docker stanza
so  these  are stanzas, kids parents

jobs:
  build:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
      - image: circleci/postgres:9.6.5-alpine-ram
      
usually docker images are config'd with env variables

ex
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
        environment:
          FLASK_CONFIG: testing
          TEST_DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""
          
so  in flask you need to set an env var to help flask access the 2nd container
the postgresql database is in localhost as you see
the user is root,the db is circle_test and no password thts how it works



      
Installing Dependencies
       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__
    \ | / _ \ | /
     \_________/
       
since you in the environment use system commands to install your dependencies


    steps:
      - checkout
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt

a env var in a run stanza overrides the env var in the docker stanza
            
- run:
          name: verifying config
          command: echo ${FLASK_CONFIG}
          environment:
            FLASK_CONFIG: staging
            

            
      
Caching Dependencies
       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__
    \ | / _ \ | /
     \_________/
                   
to save time we the CircleCI cache, here the Python venv is placed in a cache
we use save_cache to save the docker image(not the venv mabye), we use restore_cache to load it

restore_cache - searches  for a cache that matches the key template,
    here it begins with deps1 and embeds the branche name {{ .Branch }}// like angular
    checksum for requirements.txt {{ checksum "requirements/dev.txt" }}
    circleCI restores the most recent cache
        in this case: the branch cache location and the checksum given must matchs
        
run
    creates the venv and installs deps
save_cache
    create a cache from spec paths key created by key, i
    if a cache key matches another cache key circle ci does not save the intended cache,
        for here that
    
    
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements/dev.txt" }}
          paths:
            - "venv"


    .--.
  .'_\/_'.
  '. /\ .' to read more abt cache https://circleci.com/docs/2.0/caching/
    "||"


Installing and Running Selenium to Automate Browser Testing
       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__
    \ | / _ \ | /
     \_________/
                  
so the app has the current chromedriver install because of the -browsers on the docker image
circleci/python:3.6.2-stretch-browsers
                  
                  
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Download Selenium
          command: |
            curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      - run:
          name: Start Selenium
          command: |
            java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
          background: true
          


Running Tests

       _______
     _/       \_
    / |       | \
   /  |__   __|  \
  |__/((o| |o))\__
    \ | / _ \ | /
     \_________/
     
so your venv is set, selenium is ready and test are run using unittest-xml-reporting
reports will be stored in store_artifacts and store_test_results steps
so let do that

each command runs in a new shell
store_artifacts:
    the path is relative to project root
    destination is a backup in case another process is placing artifacts in the same file name
    When a job completes, artifacts appear in the CircleCI Artifacts tab
    for test results it stores in the same place as store_artifacts buts its not required, you see this in the test summary tab
    

steps:
      - run:
          command: |
            . venv/bin/activate
            python manage.py test
      - store_artifacts:
          path: test-reports/
          destination: tr1
      - store_test_results:
          path: test-reports/
     
click on links to see artifacts

to learn more https://circleci.com/docs/2.0/artifacts ,https://circleci.com/docs/2.0/collect-test-data/

